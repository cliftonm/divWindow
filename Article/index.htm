<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>Introduction</title>
</head>

<body>

<h2>Introduction</h2>
<p><img border="0" src="screenshot.png" width="464" height="278"></p>
<p>I've been wanting a sizeable, minimizable, maximizable floating window for a 
while now.&nbsp; As usual I was not happy with what I've found on the interwebs.&nbsp; 
The following:</p>
<ul>
	<li><a href="https://codepen.io/jkasun/pen/QrLjXP">Simple Javascript and CSS 
	Draggable Resizable div</a></li>
	<li><a href="https://codepen.io/jcagumbay/pen/mRvGXd">Draggable Resizable 
	without jquery ui over iframe</a> </li>
	<li><a href="https://github.com/riversun/JSFrame.js/">jsFrame</a> </li>
</ul>
<p>are three examples that came closest but lacked either the full behavior I 
wanted or 
lacked a sufficiently complete API or were overly complicated, as in jsFrame.&nbsp; 
However they all were good starting points for this implementation.&nbsp; Nor 
did I want to bring in a large package like <a href="https://www.jqwidgets.com/">
jqWidgets</a> or similar web UI simply for this one feature.&nbsp; So, time to 
invent the wheel again except this time make it more like a smooth round wheel 
rather than something roughly hewn from a rock.</p>
<h2>Key Features</h2>
<h3>Windows are sizeable and draggable</h3>
<p><img border="0" src="point1.png" width="426" height="72"></p>
<h3>Windows are maximizable </h3>
<p>screenshot here is clipped to the right:</p>
<p><img border="0" src="point2.png" width="467" height="159"></p>
<h3>Windows are minimizable to the bottom of the screen</h3>
<p><img border="0" src="point3.png" width="613" height="33"></p>
<h3>Windows within containers are minimized to the bottom of the container</h3>
<p>Assuming that the flag minimized in place is false.</p>
<p><img border="0" src="point10.png" width="422" height="160"></p>
<h3>Windows are minimizable in place</h3>
<p><img border="0" src="point4.png" width="502" height="127"></p>
<h3>Complete control of the close, minimize, and maximize buttons</h3>
<p><img border="0" src="point5.png" width="236" height="83"></p>
<h3>Automatic topmost when clicking on the header</h3>
<p>Compare with the screenshot 
at the top of the article.</p>
<p><img border="0" src="point6.png" width="375" height="283"></p>
<h3>Windows are contained within their wrapper div</h3>
<p>Here the inner windows are constrained to live within the outer div:</p>
<p><img border="0" src="point7.png" width="612" height="412"></p>
<h3>Windows within windows</h3>
<p><img border="0" src="point8.png" width="317" height="199"></p>
<h3>Window state can persisted between sessions</h3>
<p>You can save and reload the DivWindow states (position, size, state) for the 
entire document or a container.</p>
<h2>DivWindow Class API</h2>
<p>The public methods provide for a reasonable amount of control over the 
DivWindow and these are self-explanatory.&nbsp; Except for the &quot;get&quot; functions, 
these return the DivWindow instance so they can be chained for a fluent syntax 
style.</p>
<pre>constructor(id: string, options?: DivWindowOptions)

create(id: string, options?: DivWindowOptions)

setCaption(caption: string)

setColor(color: string)

setContent(html: string)

getPosition(): DivWindowPosition

getSize(): DivWindowSize

setPosition(x: string, y: string)

setSize(w: string, h: string)

setWidth(w: string)

setHeight(h: string)

close()

minimize(atPosition = false)

maximize()

restore()</pre>
<h3>Static Functions</h3>
<p>Two static functions handle saving and loading layouts:</p>
<pre>static saveLayout(id?: string)

static loadLayout(id?: string)</pre>
<h3>Get/Set Properties</h3>
<p>The following properties are also defined, mainly for the convenience of the 
DivWindow code itself.</p>
<pre>get x()
set x(x: number)

get y()
set y(y:number)

get w()
set w(w: number)

get h()
set h(h: number)</pre>
<h2>Usage</h2>
<p>At a minimum, one creates a div with some content, for example:</p>
<pre>&lt;div id=&quot;window1&quot; caption=&quot;Another Window&quot;&gt;
  &lt;p&gt;All good men&lt;br /&gt;Must come to an end.&lt;/p&gt;
&lt;/div&gt;</pre>
<p>and initializes the DivWindow with:</p>
<pre>new DivWindow(&quot;window1&quot;);</pre>
<p>rendering:</p>
<p><img border="0" src="render1.png" width="213" height="120"></p>
<p>The window by default will size automatically to the extents of the content.</p>
<p>Options can be defined declaratively using the <code>divWindowOptions</code> attribute 
with a JSON value declaring the options that are being set:</p>
<p>Example 1:</p>
<pre>&lt;div id=&quot;outerwindow1&quot; caption=&quot;Window 1&quot; divWindowOptions='{&quot;left&quot;:100, &quot;top&quot;:50}'&gt;
  Window 1
&lt;/div&gt;</pre>
<p>Example 2:</p>
<pre>&lt;div id=&quot;window3&quot; caption=Example&quot; divWindowOptions='{ &quot;left&quot;:250, &quot;top&quot;:50, &quot;width&quot;:300, 
       &quot;color&quot;: &quot;darkred&quot;, &quot;hasClose&quot;: false, &quot;hasMaximize&quot;: false, 
       &quot;moveMinimizedToBottom&quot;: false, &quot;isMinimized&quot;: true }'&gt;
  Some Content
&lt;/div&gt;</pre>
<h3>Windows within Window</h3>
<p>Declare a the outer window and inner windows, for example:</p>
<pre>&lt;div id=&quot;www&quot; caption=&quot;W-w-W&quot;&gt;
  &lt;div id=&quot;innerwindow1&quot; caption=&quot;Window 1&quot;&gt;
    Inner Window 1
  &lt;/div&gt;
  &lt;div id=&quot;innerwindow2&quot; caption=&quot;Window 2&quot;&gt;
    Inner Window 2
  &lt;/div&gt;
&lt;/div&gt;</pre>
<p>Then initialize them similar to this:</p>
<pre>new DivWindow(&quot;www&quot;)
  .setPosition(&quot;50px&quot;, &quot;300px&quot;)
  .setSize(&quot;400px&quot;, &quot;400px&quot;)
  .create(&quot;innerwindow1&quot;).setPosition(&quot;10px&quot;, &quot;50px&quot;).setColor(&quot;#90EE90&quot;)
  .create(&quot;innerwindow2&quot;).setPosition(&quot;60px&quot;, &quot;100px&quot;).setColor(&quot;#add8e6&quot;);</pre>
<p>Note the fluent syntax.&nbsp; There's nothing special about <code>create</code> here, it's 
just like calling <code>new DivWindow()</code>.</p>
<p>This renders:</p>
<p><img border="0" src="www1.png" width="312" height="194"></p>
<p>The inner windows are confined to the outer window.</p>
<h3>Windows Within Container Elements</h3>
<p>Here's a simple example where the windows are contained and confined to a 
container element.</p>
<pre>&lt;div style=&quot;position:absolute; left:600px; top:100px; width:600px; height:400px; border:1px solid black;&quot;&gt;
  &lt;div id=&quot;window1&quot; caption=&quot;A Window&quot;&gt;
    &lt;p&gt;All good men&lt;br /&gt;Must come to an end.&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;window2&quot; caption=&quot;My Window&quot;&gt;
    Hello World!
  &lt;/div&gt;
    &lt;div id=&quot;window3&quot; caption=&quot;Three by Three&quot; divWindowOptions='{ &quot;left&quot;:250, &quot;top&quot;:75, &quot;width&quot;:300, &quot;color&quot;: &quot;darkred&quot;, &quot;hasClose&quot;: false, &quot;hasMaximize&quot;: false, &quot;moveMinimizedToBottom&quot;: false, &quot;isMinimized&quot;: true }'&gt;
      &lt;p&gt;Some content&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</pre>
<p>Example initialization:</p>
<pre>new DivWindow(&quot;window1&quot;).setPosition(&quot;0px&quot;, &quot;0px&quot;);
new DivWindow(&quot;window2&quot;, { hasMaximize: false });
new DivWindow(&quot;window3&quot;);</pre>
<p>Which renders as:</p>
<p><img border="0" src="divwin.png" width="612" height="416"></p>
<h2>Implementation</h2>
<p>Here I'll cover the more interesting aspects of the implementation, as much 
of the code should be obvious.&nbsp; No jQuery is used!</p>
<h3>A Note Regard require.js</h3>
<p>Because I'm intending to use this as a component in other projects where I'm 
using require.js, there is a small amount of boilerplate to support the <code>export</code> 
keyword.&nbsp; </p>
<pre>&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;title&gt;DivWin&lt;/title&gt;
  &lt;link rel=&quot;stylesheet&quot; href=&quot;divWindow.css&quot; type=&quot;text/css&quot; /&gt;
  &lt;script data-main=&quot;AppConfig&quot; src=&quot;require.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;</pre>
<p>AppConfig.ts:</p>
<pre>import { AppMain } from &quot;./AppMain&quot;

require(['AppMain'],
  (main: any) =&gt; {
    const appMain = new AppMain();
    appMain.run();
  }
);</pre>
<p>AppMain.ts (for initializing the demo):</p>
<pre>import { DivWindow } from &quot;./divWindow&quot;

export class AppMain {
  public run() {
    document.getElementById(&quot;saveLayout&quot;).onclick = () =&gt; DivWindow.saveLayout();
    document.getElementById(&quot;loadLayout&quot;).onclick = () =&gt; DivWindow.loadLayout();

    new DivWindow(&quot;outerwindow1&quot;);
    new DivWindow(&quot;outerwindow2&quot;);
    new DivWindow(&quot;window1&quot;).setPosition(&quot;0px&quot;, &quot;0px&quot;);
    new DivWindow(&quot;window2&quot;, { hasMaximize: false });
    new DivWindow(&quot;window3&quot;);

    new DivWindow(&quot;www&quot;)
      .setPosition(&quot;50px&quot;, &quot;300px&quot;)
      .setSize(&quot;400px&quot;, &quot;400px&quot;)
      .create(&quot;innerwindow1&quot;).setPosition(&quot;10px&quot;, &quot;50px&quot;).setColor(&quot;#90EE90&quot;)
      .create(&quot;innerwindow2&quot;).setPosition(&quot;60px&quot;, &quot;100px&quot;).setColor(&quot;#add8e6&quot;);

    new DivWindow(&quot;exampleContent&quot;).setPosition(&quot;100px&quot;, &quot;700px&quot;).w = 200;
  }
}</pre>
<p>I had the project working fine without require.js, but I really wanted to 
have the implementation in its final form for other projects, but it's easy to 
revert back -- just remove the <code>export</code> keyword on all the classes and change how the page is 
initialized to <code>window.onLoad = () =&gt; {...initializate stuff....};</code></p>
<h3>Events</h3>
<p>The following events are captured for each window:</p>
<pre>document.getElementById(this.idCaptionBar).onmousedown = () =&gt; this.updateZOrder();
document.getElementById(this.idWindowDraggableArea).onmousedown = e =&gt; this.onDraggableAreaMouseDown(e);
document.getElementById(this.idClose).onclick = () =&gt; this.close();
document.getElementById(this.idMinimize).onclick = () =&gt; this.minimizeRestore();
document.getElementById(this.idMaximize).onclick = () =&gt; this.maximizeRestore();</pre>
<h3>The Window Template</h3>
<p>The thing I struggled with the most, ironically, was the template that adds 
itself to the containing DIV element.&nbsp; The struggle here was getting the 
elements in the right parent-child relationship so that the 
close/minimize/maximize click events would fire!&nbsp; This may seem silly to 
the reader, but I had issues as I basically first had child elements defined as 
a sibling after the div containing the &quot;buttons.&quot;&nbsp; Here's the final form:</p>
<pre>protected template = '\
&lt;div id=&quot;{w}_windowTemplate&quot; class=&quot;divWindowPanel&quot; divWindow&gt;\
  &lt;div id=&quot;{w}_captionBar&quot; class=&quot;divWindowCaption&quot; style=&quot;height: 18px&quot;&gt;\
    &lt;div class=&quot;noselect&quot; style=&quot;position:absolute; top:3px; left:0px; text-align:center; width: 100%&quot;&gt;\
      &lt;div id=&quot;{w}_windowCaption&quot; style=&quot;display:inline-block&quot;&gt;\&lt;/div&gt;\
      &lt;div style=&quot;position:absolute; left:5px; display:inline-block&quot;&gt;\
        &lt;div id=&quot;{w}_close&quot; class=&quot;dot&quot; style=&quot;background-color:#FC615C; margin-right: 3px&quot;&gt;&lt;/div&gt;\
        &lt;div id=&quot;{w}_minimize&quot; class=&quot;dot&quot; style=&quot;background-color: #FDBE40; margin-right: 3px&quot;&gt;&lt;/div&gt;\
        &lt;div id=&quot;{w}_maximize&quot; class=&quot;dot&quot; style=&quot;background-color: #34CA49&quot;&gt;&lt;/div&gt;\
      &lt;/div&gt;\
    &lt;/div&gt;\
    &lt;div id=&quot;{w}_windowDraggableArea&quot; class=&quot;noselect&quot; style=&quot;position:absolute; top:0px; left:55px; width: 100%; height:22px; cursor: move; display:inline-block&quot;&gt;&amp;nbsp;&lt;/div&gt;\
  &lt;/div&gt;\
  &lt;div id=&quot;{w}_windowContent&quot; class=&quot;divWindowContent&quot;&gt;&lt;/div&gt;\
&lt;/div&gt;\
';</pre>
<p>Note that any occurrence of <code>{w}</code> is replaced with the container's element id.&nbsp; 
So, in the constructor, you'll see:</p>
<pre>const divwin = document.getElementById(id);
const content = divwin.innerHTML;

divwin.innerHTML = this.template.replace(/{w}/g, id);
document.getElementById(this.idWindowContent).innerHTML = content;</pre>
<p>What this code is doing is first grabbing the content declaratively defined, 
then replacing the content with the template (having set the id's of the 
template elements), and finally replacing the content area of the template with 
the content of the original DIV element.&nbsp; Thus, a window that is 
declaratively described as:</p>
<pre>&lt;div id=&quot;exampleContent&quot; caption=&quot;Enter Name&quot;&gt;
  &lt;div&gt;
    &lt;span style=&quot;min-width:100px; display:inline-block&quot;&gt;First Name:&lt;/span&gt; &lt;input /&gt;
  &lt;/div&gt;
  &lt;div style=&quot;margin-top:3px&quot;&gt;
    &lt;span style=&quot;min-width:100px; display:inline-block&quot;&gt;Last Name:&lt;/span&gt; &lt;input /&gt;
  &lt;/div&gt;
&lt;/div&gt;</pre>
<p>And initialized as:</p>
<pre>new DivWindow(&quot;exampleContent&quot;).setPosition(&quot;100px&quot;, &quot;700px&quot;).w = 200;</pre>
<p>renders as:</p>
<p><img border="0" src="enterName.png" width="212" height="130"></p>
<p>and the final HTML structure is (clipped on the right):</p>
<p><img border="0" src="finalHtml.png" width="634" height="556"></p>
<h4>Some Things to Note</h4>
<p>There is a DIV specifically to indicate the draggable area with a &quot;move&quot; 
cursor, that is offset from the buttons in the caption, so if you're mouse is 
over the buttons the cursor appears as a pointer:</p>
<p><img border="0" src="pointer1.png" width="216" height="47"></p>
<p>And as you move the cursor right, it changes to the &quot;move&quot; cursor:</p>
<p><img border="0" src="pointer2.png" width="218" height="34"></p>
<p>Also, note the attribute <code>divWindow</code> in the outer template DIV:</p>
<pre>&lt;div id=&quot;{w}_windowTemplate&quot; class=&quot;divWindowPanel&quot; divWindow&gt;\</pre>
<p>This is used in a couple places to get elements specific to the container or 
the document:</p>
<pre>protected getDivWindows(useDocument = false): NodeListOf&lt;Element&gt; {
  const el = this.dw.parentElement.parentElement;
  const els = ((el.localName === &quot;body&quot; || useDocument) ? document : el).querySelectorAll(&quot;[divWindow]&quot;);

  return els;
}</pre>
<h4>All Those IDs</h4>
<p>Yeah, the template has 8 elements that have dynamic ids, so I found this 
makes the rest of the code a lot more readable:</p>
<pre>protected setupIDs(id: string): void {
  this.idWindowTemplate = `${id}_windowTemplate`;
  this.idCaptionBar = `${id}_captionBar`;
  this.idWindowCaption = `${id}_windowCaption`;
  this.idWindowDraggableArea = `${id}_windowDraggableArea`;
  this.idWindowContent = `${id}_windowContent`;
  this.idClose = `${id}_close`;
  this.idMinimize = `${id}_minimize`;
  this.idMaximize = `${id}_maximize`;
}</pre>
<h3>Z-Order</h3>
<pre>protected updateZOrder(): void {
  // Get all divWindow instances in the document so the current divWindow becomes topmost of all.
  const nodes = this.getDivWindows(true);

  const maxz = Math.max(
    ...Array.from(nodes)
    .map(n =&gt;
    parseInt(window.document.defaultView.getComputedStyle(n).getPropertyValue(&quot;z-index&quot;))
  ));

  this.dw.style.setProperty(&quot;z-index&quot;, (maxz + 1).toString());
}</pre>
<p>As the code comment points out, any time a window is clicked, it is placed 
above any other window, including any windows outside of its container.&nbsp; 
This was done so that in this and similar scenarios:</p>
<p><img border="0" src="zorder1.png" width="352" height="163"></p>
<p>Clicking on A Window, which is contained in a DIV, always appears in front of 
the other windows, such as Window 1:</p>
<p><img border="0" src="zorder2.png" width="370" height="174"></p>
<p>If we don't do this, the user ends up having to click multiple times to get 
the window to be topmost, depending on what other windows inside or outside a 
container were selected.</p>
<p>And yes, the code is lame, simply adding 1 one to current max z-order, but 
given that Javascript's number maximum is 1.7976931348623157e+308, I really 
don't think I have to worry about the user clicking windows to the foreground 
and exceeding the count.</p>
<h3>Containing Windows</h3>
<pre>protected contain(dwx: number, dwy: number): DivWindowPosition {
  let el = this.dw.parentElement.parentElement;
  let offsety = 0;

  // DivWindow within DivWindow?
  if (el.id.includes(&quot;_windowContent&quot;)) {
    // If so, get the parent container, not the content area.
    el = el.parentElement;

    // Account for the caption:
    offsety = this.CAPTION_HEIGHT;
  }

  dwx = dwx &lt; 0 ? 0 : dwx;
  dwy = dwy &lt; offsety ? offsety : dwy;

  // Constrained within a parent?
  if (el.localName !== &quot;body&quot;) {
    if (dwx + this.dw.offsetWidth &gt;= el.offsetWidth) {
      dwx = el.offsetWidth - this.dw.offsetWidth - 1;
    }

    if (dwy + this.dw.offsetHeight &gt;= el.offsetHeight) {
      dwy = el.offsetHeight - this.dw.offsetHeight - 1;
    }
  }

  return { x: dwx, y: dwy };
}</pre>
<p>This code, and some other places in the code, have some magic numbers, like 
<code>CAPTION_HEIGHT</code>.&nbsp; I guess I could have queried the caption element for its 
height.&nbsp; The salient point is that the contained window cannot be moved 
beyond the boundaries of its container.&nbsp; This includes windows that are 
defined in the <code>body</code> element -- the window cannot move outside of the screen 
boundaries.</p>
<h3>Minimizing Windows</h3>
<pre>public minimize(atPosition = false): DivWindow {
  this.saveState();
  this.dw.style.height = this.MINIMIZED_HEIGHT;
  this.minimizedState = true;
  this.maximizedState = false;

  if (this.options.moveMinimizedToBottom &amp;&amp; !atPosition) {
    let minTop;

    if (this.isContained()) {
      let el = this.dw.parentElement.parentElement;

      if (el.id.includes(&quot;_windowContent&quot;)) {
        el = el.parentElement;
      } 

      minTop = el.offsetHeight - (this.CAPTION_HEIGHT + 3);
    } else {
      minTop = (window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight) - (this.CAPTION_HEIGHT + 1);
    }

    const left = this.findAvailableMinimizedSlot(minTop);

    // Force minimized window when moving to bottom to have a fixed width.
    this.dw.style.width = this.MINIMIZED_WIDTH;
    this.dw.style.top = minTop + &quot;px&quot;;
    this.dw.style.left = left + &quot;px&quot;;
  }

  this.dw.style.setProperty(&quot;resize&quot;, &quot;none&quot;);

  if (this.options.moveMinimizedToBottom) {
    document.getElementById(this.idWindowDraggableArea).style.setProperty(&quot;cursor&quot;, &quot;default&quot;);
  }

  return this;
}</pre>
<p>If a window has <code>moveMinimizedToBottom === false</code>, it is minimized in place.&nbsp; 
Otherwise, it is minimized to the bottom of the container element, which might 
be the bottom of the screen.&nbsp; What the above code does is handle the 
following scenarios:</p>
<p>Minimize to bottom of the screen for windows whose parent is <code>body</code>:</p>
<p><img border="0" src="min1.png" width="471" height="57"></p>
<p>Minimize to the bottom of another window:</p>
<p><img border="0" src="min2.png" width="521" height="194"></p>
<p>Minimize the the bottom of a non-window container:</p>
<p><img border="0" src="min3.png" width="634" height="65"></p>
<p>Furthermore, the minimizer tries to be smart in a dumb way.&nbsp; It sets the width of a 
minimized window to 200px and places them in order horizontally across the 
bottom.&nbsp; If a window is restored, the other minimized windows do not shift 
position:</p>
<p><img border="0" src="min4.png" width="451" height="58"></p>
<p>But the empty slot is filled again when a window is minimized again (see 
previous screenshot.)</p>
<p>This behavior was entirely my choice, obviously if you don't like this 
behavior you can change it to your liking, I would imagine rather easily.</p>
<h3>Save Layout</h3>
<pre>public static saveLayout(id?: string): void {
  const els = (id ? document.getElementById(id) : document).querySelectorAll(&quot;[divWindow]&quot;);
  const key = `divWindowState${id ?? &quot;document&quot;}`;

  const states: DivWindowState[] = Array
    .from(els)
    .map(el =&gt; DivWindow.divWindows.filter(dw =&gt; dw.idWindowTemplate === el.id)[0])
    .filter(dw =&gt; dw) // ignore windows we can't find, though this should not happen.
    .map(dw =&gt; ({
      id: dw.idWindowTemplate,
      minimizedState: dw.minimizedState,
      maximizedState: dw.maximizedState,
      left: dw.x,
      top: dw.y,
      width: dw.w,
      height: dw.h,
      restoreLeft: dw.left,
      restoreTop: dw.top,
      restoreWidth: dw.width,
      restoreHeight: dw.height
  }) as DivWindowState);

  window.localStorage.setItem(key, JSON.stringify(states));
}</pre>
<p>This code should be self-explanatory, the idea being that the application 
using <code>DivWindow</code> can determine whether to save the layout for the entire document 
or just the windows inside a container.</p>
<p>Normally one might have a wrapper class for managing all the <code>DivWindow</code> 
instances, but this seem like overkill, so you'll note that this is a static 
function (as well as loadLayout), and the <code>DivWindow</code> class implements:</p>
<pre>export class DivWindow {
  protected static divWindows: DivWindow[] = [];</pre>
<p>I saw no reason to implement a separate class simply to manage the collection 
of <code>DivWindow</code> instances.&nbsp; <u><b>However</b></u>, if you are 
implementing something like a Single Page Application (SPA) that actually has 
multiple pages with different window layouts, then I would recommend modifying 
the code so that each &quot;page&quot; maintains it's own collection.</p>
<p>Also note that local storage is used so that the layout persists between 
sessions.</p>
<h3>Load Layout</h3>
<pre>public static loadLayout(id?: string): void {
  const key = `divWindowState${id ?? &quot;document&quot;}`;
  const jsonStates = window.localStorage.getItem(key);

  if (jsonStates) {
    const states = JSON.parse(jsonStates) as DivWindowState[];

    states.forEach(state =&gt; {
      const dw = DivWindow.divWindows.filter(dw =&gt; dw.idWindowTemplate === state.id)[0];

      // Is it in our list, and does it exist (maybe the user closed it?)
      if (dw &amp;&amp; document.getElementById(dw.idWindowTemplate)) {
        dw.minimizedState = state.minimizedState;
        dw.maximizedState = state.maximizedState;
        dw.left = state.restoreLeft;
        dw.top = state.restoreTop;
        dw.width = state.restoreWidth;
        dw.height = state.restoreHeight;
        dw.setPosition(state.left + &quot;px&quot;, state.top + &quot;px&quot;);
        dw.setSize(state.width + &quot;px&quot;, state.height + &quot;px&quot;);

        if (dw.maximizedState) {
          document.getElementById(dw.idWindowTemplate).style.setProperty(&quot;resize&quot;, &quot;none&quot;);
          document.getElementById(dw.idWindowDraggableArea).style.setProperty(&quot;cursor&quot;, &quot;default&quot;);
        } else if (dw.minimizedState) {
          document.getElementById(dw.idWindowTemplate).style.setProperty(&quot;resize&quot;, &quot;none&quot;);

          if (dw.options.moveMinimizedToBottom) {
            document.getElementById(dw.idWindowDraggableArea).style.setProperty(&quot;cursor&quot;, &quot;default&quot;);
          }
        } else {
          document.getElementById(dw.idWindowTemplate).style.setProperty(&quot;resize&quot;, &quot;both&quot;);
          document.getElementById(dw.idWindowDraggableArea).style.setProperty(&quot;cursor&quot;, &quot;move&quot;);
        }
      }
    });
  }
}</pre>
<p>The only thing to note here is the management of the resize and cursor state 
depending on the restored window's minimized / maximized state and the minimized 
&quot;in place&quot; option.</p>
<h3>The Full Set of Initialization Options</h3>
<p>These are all the options one can specify when the window is created:</p>
<pre>export class DivWindowOptions {
  public left?: number;
  public top?: number;
  public width?: number;
  public height?: number;
  public hasClose? = true;
  public hasMinimize?= true;
  public hasMaximize?= true;
  public moveMinimizedToBottom?= true;
  public color?: string;
  public isMinimized?: boolean;
  public isMaximized?: boolean;
}</pre>
<p>Any option not defined (no pun intended) reverts to its default behavior.</p>
<h3>CSS</h3>
<p>For some reason, people like to see the CSS, so here it is:</p>
<pre>.divWindowPanel {
  left: 300px;
  width: 200px;
  position: absolute;
  z-index: 100;
  overflow: hidden;
  resize: both;
  border: 1px solid #2196f3;
  border-top-left-radius: 5px;
  border-top-right-radius: 5px;
  border-bottom-left-radius: 5px;
  border-bottom-right-radius: 5px;
  background-color: white;
}

.divWindowCaption {
  padding: 3px;
  z-index: 10;
  background-color: #2196f3;
  color: #fff;
}

.divWindowContent {
  text-align: left;
  padding: 7px;
}

/* https://stackoverflow.com/a/4407335 */
/* We have this attribute in the caption because dragging the panel with selected text causes problems. */
.noselect {
  -webkit-touch-callout: none; /* iOS Safari */
  -webkit-user-select: none; /* Safari */
  -moz-user-select: none; /* Old versions of Firefox */
  -ms-user-select: none; /* Internet Explorer/Edge */
  user-select: none; /* Non-prefixed version, currently supported by Chrome, Edge, Opera and Firefox */
}

.dot {
  height: 10px;
  width: 10px;
  border-radius: 50%;
  display: inline-block;
}</pre>
<p>Note the <code>noselect</code> CSS.&nbsp; I had an interesting problem where 
I could click on the caption and it would highlight the text and would cause 
strange behavior when subsequently dragging the window.&nbsp; This problem was 
solved by making the caption not selectable.</p>
<h2>Conclusion</h2>
<p>This was quite fun to implement and I finally have a simple but comprehensive 
windowing component that I can now use for other applications.</p>

<h3>Some Loose Ends</h3>
<ul>
	<li>For a constrained window, when dragging it past the extents of the 
	parent container, the mouse keeps moving and loses the &quot;move&quot; cursor and 
	it's position relative to the window caption.</li>
	<li>If you shrink a <code>DivWindow</code> that itself contains <code>DivWindows</code>, the inner 
	<code>DivWindows</code> will not adjust to remain constrained, which 
	includes minimized windows within the container.</li>
	<li>A window caption that is too long will collide with the 
	close/minimize/maximize buttons.</li>
	<li>I have a kludge when maximizing the window to avoid scrollbars.</li>
	<li><code>DivWindows</code> within <code>DivWindows</code> within <code>DivWindows</code> etc might work but I 
	haven't tested this scenario.</li>
	<li>I don't handle the resize event as this cannot be wired up to an 
	element and I didn't want to dig deeper into this, so it's possible to 
	resize a contained window beyond the size of the container.</li>
	<li>If you resize a <code>DivWindow</code> that has minimized child <code>DivWindows</code>, the child 
	<code>DivWindows</code> will not automatically move to the bottom of the parent <code>DivWindow</code>.</li>
	<li>The code prevents dragging a minimized or maximized window, but you can 
	change that.</li>
	<li>I decided not to implement any event triggers that an application could 
	hook in to, but this is easily added if you need the application to do 
	something depending on window state change, or if you want to override the 
	default behavior.</li>
	<li>Styling options (would you prefer Window's style _, box, and X for the 
	minimize, maximize, and close buttons?) is not implemented and I really 
	don't want to get into styling options.</li>
</ul>

</body>

</html>